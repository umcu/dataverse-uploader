#!/usr/bin/env python3

import csv
from dave import Api, read_file_json

config = read_file_json('~/.config/dataverse.json')
prod_api = Api(config['production']['url'], config['production']['key'])
demo_api = Api(config['demo']['url'], config['demo']['key'])

# create sub-dataverses, starting from specification in CSV form
dataverses_file = open('dataverses.csv', 'r')
for dv in csv.DictReader(dataverses_file, delimiter=';'):
    alias = dv['alias']
    if alias == 'UMCU': continue  # at the start, this one already exists
    result = demo_api.dataverse_create('UMCU', name=dv['name'], alias=alias, email=dv['email'])
    result = demo_api.dataverse_publish(alias)

# copy groups from production environment to demo environment
for gr in prod_api.dataverse_groups('UMCU'):
    result = demo_api.dataverse_create_group('UMCU', name=gr['displayName'],
                                             alias=gr['groupAliasInOwner'],
                                             description=gr['description'])

# read groups from demo environment, so that we can map alias -> id (d)
groups = demo_api.dataverse_groups('UMCU')
group_map = {gr['groupAliasInOwner']: gr['identifier'] for gr in groups}

# make list of dataverses in both environments, so that we can map id (p) -> alias -> id (d)
prod_ids = [elt['id'] for elt in prod_api.dataverse_contents('UMCU') if elt['type'] == 'dataverse']
prod_ids.append(prod_api.dataverse_view('UMCU')['id'])
p_map = {}  # maps id to alias
for dvid in prod_ids:
    view = prod_api.dataverse_view(dvid)
    p_map[view['id']] = view['alias']
demo_ids = [elt['id'] for elt in demo_api.dataverse_contents('UMCU') if elt['type'] == 'dataverse']
demo_ids.append(demo_api.dataverse_view('UMCU')['id'])
d_map = {}  # maps alias to id
for dvid in demo_ids:
    view = demo_api.dataverse_view(dvid)
    d_map[view['alias']] = view['id']

# in UMCU dataverse: assign role to group 'adminumcu'
# in division dataverses: assign role to groups 'adminumcu', 'dsXXX', 'resXXX', where XXX identifies the division
#
# read roles of dataverses on production site, where a role has the following content:
# id    assignee                  roleId  _roleAlias definitionPointId
# 9037  &explicit/100081-dsbeeld  7       curator    105750
roles = {}
for dvid in prod_ids:
    roles[dvid] = prod_api.dataverse_roles(dvid)
    for role in roles[dvid]:
        assignee = role['assignee']  # assignee in production database
        alias = assignee.split('-')[1]
        if alias not in group_map: continue  # should not occur in theory
        new_dvid = d_map[p_map[dvid]]
        new_assignee = group_map[alias]  # assignee in demo database
        demo_api.dataverse_add_role(new_dvid, new_assignee, role['_roleAlias'])
