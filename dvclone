#!/usr/bin/env python3

from requests import get, put, post
import pandas as pd
import json, csv

method_callable = {
    'GET': get, 'PUT': put, 'POST': post
}

class Api:
    def __init__(self, base_url, api_token):
        self.base_url = base_url
        self.api_token = api_token
        self.headers = {'X-Dataverse-key': api_token, 'Content-Type': 'application/json'}

    """An HTTP request results in a response.
    Each response has a 3-digit status code.
    The first digit determines the reponse class:
        1: informational response, caller should decide what to do
        2: success
        3: redirection error
        4: client error, caller should handle this class of error 
        5: server error
    """

    def _request(self, method, endpoint, **kwarg):
        if 'props' in kwarg:
            props = kwarg['props']
            del kwarg['props']
            if isinstance(props, dict):
                payload = json.dumps(props)
            elif isinstance(props, str):
                payload = props
            else:
                raise ValueError(f"props must be str or dict, not {type(props)}")
        else:
            payload = ''
        completed_endpoint = endpoint.format(url=self.base_url, **kwarg)
        response = method_callable[method](completed_endpoint, data=payload, headers=self.headers)
        code = response.status_code
        code_class = code // 100
        if code_class in [1, 2, 4]:
            resp_json = response.json()
            if 'data' in resp_json:
                return resp_json['data']
            else:
                print(f"{method} {completed_endpoint} -> code {code}")
                print(f"no data property in {resp_json}")
                return []
        elif code_class in [3, 5]:
            resp_json = response.json()
            if 'message' in resp_json:
                message = resp_json['message']
                print(message)
            else:
                print(f"{method} {completed_endpoint} -> code {code}")
                print(f"no message property in {resp_json}")
            return []
        else:
            print(f"{method} {completed_endpoint} -> unexpected status code {code}")
            return []

    def get_request(self, endpoint, **kwarg):
        return self._request('GET', endpoint, **kwarg)

    def post_request(self, endpoint, **kwarg):
        return self._request('POST', endpoint, **kwarg)

    def put_request(self, endpoint, **kwarg):
        return self._request('PUT', endpoint, **kwarg)

    def dataverse_create(self, dataverse_id, name, alias, email):
        contacts = [{'contactEmail': f'{elt}@umcutrecht.nl'} for elt in email.split(',')]
        props = {'name': name, 'alias': alias, 'dataverseContacts': contacts,
                 'affiliation': 'UMCU', 'description': '', 'dataverseType': 'DEPARTMENT'}
        return self.post_request("{url}/api/dataverses/{dvid}", dvid=dataverse_id, props=props)

    def dataverse_publish(self, dataverse_id):
        return self.post_request("{url}/api/dataverses/{dvid}/actions/:publish", dvid=dataverse_id)

    def dataverse_view(self, dataverse_id):
        return self.get_request("{url}/api/dataverses/{dvid}", dvid=dataverse_id)

    def dataverse_contents(self, dataverse_id):
        return self.get_request("{url}/api/dataverses/{dvid}/contents", dvid=dataverse_id)

    def dataverse_groups(self, dataverse_id):
        return self.get_request("{url}/api/dataverses/{dvid}/groups", dvid=dataverse_id)

    def dataverse_add_group(self, dataverse_id, name, alias, description):
        props = {'displayName': name, 'aliasInOwner': alias, 'description': description}
        return self.post_request("{url}/api/dataverses/{dvid}/groups", dvid=dataverse_id, props=props)

    def dataverse_roles(self, dataverse_id):
        return self.get_request("{url}/api/dataverses/{dvid}/assignments", dvid=dataverse_id)

    def dataverse_add_role(self, dataverse_id, assignee, role):
        props = {'assignee': assignee, 'role': role}
        return self.post_request("{url}/api/dataverses/{dvid}/assignments", dvid=dataverse_id, props=props)

prod_api = Api('https://dataverse.nl', '7cfc5b8f-3c8d-4c50-8bd5-2a56ad1ef51b')
demo_api = Api('https://demo.dataverse.nl', '5bf24ffd-1789-480f-b8a2-4ee18a9b895a')

# create sub-dataverses, starting from specification in CSV form
dataverses_file = open('dataverses.csv', 'r')
dataverses = csv.DictReader(dataverses_file, delimiter=';')
for dv in dataverses:
    alias = dv['alias']
    if alias == 'UMCU': continue  # at the start, this one already exists
    result = demo_api.dataverse_create('UMCU', name=dv['name'], alias=alias, email=dv['email'])
    print(result)
    result = demo_api.dataverse_publish(alias)
    print(result)

# copy groups from production environment to demo environment
for gr in prod_api.dataverse_groups('UMCU'):
    result = demo_api.dataverse_create_group('UMCU', name=gr['displayName'],
                                             alias=gr['groupAliasInOwner'],
                                             description=gr['description'])
    print(result)

# read groups from demo environment, so that we can map alias -> id (d)
groups = demo_api.dataverse_groups('UMCU')
group_map = {gr['groupAliasInOwner']: gr['identifier'] for gr in groups}

# make list of dataverses in both environments, so that we can map id (p) -> alias -> id (d)
prod_ids = [elt['id'] for elt in prod_api.dataverse_contents('UMCU') if elt['type'] == 'dataverse']
prod_ids.append(prod_api.dataverse_view('UMCU')['id'])
p_map = {}  # maps id to alias
for dvid in prod_ids:
    view = prod_api.dataverse_view(dvid)
    p_map[view['id']] = view['alias']
demo_ids = [elt['id'] for elt in demo_api.dataverse_contents('UMCU') if elt['type'] == 'dataverse']
demo_ids.append(demo_api.dataverse_view('UMCU')['id'])
d_map = {}  # maps alias to id
for dvid in demo_ids:
    view = demo_api.dataverse_view(dvid)
    d_map[view['alias']] = view['id']

# in UMCU dataverse: assign role to group 'adminumcu'
# in division dataverses: assign role to groups 'adminumcu', 'dsXXX', 'resXXX', where XXX identifies the division
#
# read roles of dataverses on production site, where a role has the following content:
# id    assignee                  roleId  _roleAlias definitionPointId
# 9037  &explicit/100081-dsbeeld  7       curator    105750
roles = {}
for dvid in prod_ids:
    roles[dvid] = prod_api.dataverse_roles(dvid)
    for role in roles[dvid]:
        assignee = role['assignee']  # assignee in production database
        alias = assignee.split('-')[1]
        if alias not in group_map: continue  # should not occur in theory
        new_dvid = d_map[p_map[dvid]]
        new_assignee = group_map[alias]  # assignee in demo database
        demo_api.dataverse_add_role(new_dvid, new_assignee, role['_roleAlias'])
